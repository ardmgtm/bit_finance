// Mocks generated by Mockito 5.1.0 from annotations
// in bit_finance/test/infrastructure/repository/transaction_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:bit_finance/domain/entity/transaction/transaction.dart' as _i3;
import 'package:bit_finance/infrastructure/core/local_db.dart' as _i2;
import 'package:bit_finance/infrastructure/local_data_source/transaction/transaction_local_data_source.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLocalDb_0 extends _i1.Fake implements _i2.LocalDb {}

class _FakeTransaction_1 extends _i1.Fake implements _i3.Transaction {}

/// A class which mocks [TransactionLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionLocalDataSource extends _i1.Mock
    implements _i4.TransactionLocalDataSource {
  MockTransactionLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LocalDb get localDb => (super.noSuchMethod(Invocation.getter(#localDb),
      returnValue: _FakeLocalDb_0()) as _i2.LocalDb);
  @override
  _i5.Future<_i3.Transaction> createTransaction(_i3.Transaction? transaction) =>
      (super.noSuchMethod(Invocation.method(#createTransaction, [transaction]),
              returnValue: Future<_i3.Transaction>.value(_FakeTransaction_1()))
          as _i5.Future<_i3.Transaction>);
  @override
  _i5.Future<List<_i3.Transaction>> getMonthlyTransaction(
          int? month, int? year) =>
      (super.noSuchMethod(
              Invocation.method(#getMonthlyTransaction, [month, year]),
              returnValue:
                  Future<List<_i3.Transaction>>.value(<_i3.Transaction>[]))
          as _i5.Future<List<_i3.Transaction>>);
}
